{"ast":null,"code":"import { FormGroup as FormGroup$1, FormControl as FormControl$1, FormArray as FormArray$1, FormBuilder as FormBuilder$1 } from '@angular/forms';\nimport { merge, defer, of, Subject, isObservable, from } from 'rxjs';\nimport { map, distinctUntilChanged, startWith, pairwise, filter, take, tap, switchMap, debounceTime } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nfunction selectControlValue$(control, mapFn) {\n  return control.value$.pipe(map(mapFn), distinctUntilChanged());\n}\n\nfunction controlValueChanges$(control) {\n  return merge(defer(() => of(control.getRawValue())), control.valueChanges.pipe(map(() => control.getRawValue())));\n}\n\nfunction controlStatus$(control, type) {\n  return merge(defer(() => of(control[type])), control.statusChanges.pipe(map(() => control[type]), distinctUntilChanged()));\n}\n\nfunction enableControl(control, enabled, opts) {\n  if (enabled) {\n    control.enable(opts);\n  } else {\n    control.disable(opts);\n  }\n}\n\nfunction disableControl(control, disabled, opts) {\n  enableControl(control, !disabled, opts);\n}\n\nfunction controlDisabledWhile(control, observable, opts) {\n  return observable.subscribe(isDisabled => disableControl(control, isDisabled, opts));\n}\n\nfunction controlEnabledWhile(control, observable, opts) {\n  return observable.subscribe(isEnabled => enableControl(control, isEnabled, opts));\n}\n\nfunction mergeErrors(existing, toAdd) {\n  if (!existing && !toAdd) {\n    return null;\n  }\n\n  return Object.assign(Object.assign({}, existing), toAdd);\n}\n\nfunction removeError(errors, key) {\n  if (!errors) {\n    return null;\n  }\n\n  const updatedErrors = Object.assign({}, errors);\n  delete updatedErrors[key];\n  return Object.keys(updatedErrors).length > 0 ? updatedErrors : null;\n}\n\nfunction hasErrorAnd(and, control, error, path) {\n  const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);\n  return hasError && control[and];\n}\n\nfunction controlErrorChanges$(control, errors$) {\n  return merge(defer(() => of(control.errors)), errors$, control.valueChanges.pipe(map(() => control.errors), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))));\n}\n\nfunction markAllDirty(control) {\n  control.markAsDirty({\n    onlySelf: true\n  });\n\n  control._forEachChild(control => {\n    var _a;\n\n    return (_a = control.markAllAsDirty) === null || _a === void 0 ? void 0 : _a.call(control);\n  });\n}\n\nclass FormGroup extends FormGroup$1 {\n  constructor(controls, validatorOrOpts, asyncValidator) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.controls = controls;\n    this.touchChanges = new Subject();\n    this.dirtyChanges = new Subject();\n    this.errorsSubject = new Subject();\n    this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n    this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n    this.value$ = controlValueChanges$(this);\n    this.disabled$ = controlStatus$(this, 'disabled');\n    this.enabled$ = controlStatus$(this, 'enabled');\n    this.status$ = controlStatus$(this, 'status');\n    this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n  }\n\n  select(mapFn) {\n    return selectControlValue$(this, mapFn);\n  }\n\n  get(key) {\n    return super.get(key);\n  }\n\n  setValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable, options);\n  }\n\n  getRawValue() {\n    return super.getRawValue();\n  }\n\n  markAsTouched(...opts) {\n    super.markAsTouched(...opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(...opts) {\n    super.markAsUntouched(...opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(...opts) {\n    super.markAsPristine(...opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(...opts) {\n    super.markAsDirty(...opts);\n    this.dirtyChanges.next(true);\n  }\n\n  markAllAsDirty() {\n    markAllDirty(this);\n  }\n\n  setEnable(enable = true, opts) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts) {\n    disableControl(this, disable, opts);\n  }\n\n  disabledWhile(observable, options) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable, options) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  reset(formState, options) {\n    super.reset(formState, options);\n  }\n\n  setValidators(newValidators, options) {\n    super.setValidators(newValidators);\n    super.updateValueAndValidity(options);\n  }\n\n  setAsyncValidators(newValidator, options) {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity(options);\n  }\n\n  getError(...params) {\n    return super.getError(...params);\n  }\n\n  setErrors(...opts) {\n    var _a;\n    /**\n     * @description\n     * Use an elvis operator to avoid a throw when the control is used with an async validator\n     * Which will be instantly resolved (like with `of(null)`)\n     * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n     * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n     *\n     * Issue: https://github.com/ngneat/reactive-forms/issues/91\n     * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n     */\n\n\n    (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n    return super.setErrors(...opts);\n  }\n\n  mergeErrors(errors, opts) {\n    this.setErrors(mergeErrors(this.errors, errors), opts);\n  }\n\n  removeError(key, opts) {\n    this.setErrors(removeError(this.errors, key), opts);\n  }\n\n  hasErrorAndTouched(error, path) {\n    return hasErrorAnd('touched', this, error, path);\n  }\n\n  hasErrorAndDirty(error, path) {\n    return hasErrorAnd('dirty', this, error, path);\n  }\n\n}\n\nclass FormControl extends FormControl$1 {\n  constructor(formState, validatorOrOpts, asyncValidator) {\n    super(formState, validatorOrOpts, asyncValidator);\n    this.touchChanges = new Subject();\n    this.dirtyChanges = new Subject();\n    this.errorsSubject = new Subject();\n    this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n    this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n    this.value$ = controlValueChanges$(this);\n    this.disabled$ = controlStatus$(this, 'disabled');\n    this.enabled$ = controlStatus$(this, 'enabled');\n    this.status$ = controlStatus$(this, 'status');\n    this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n  }\n\n  setValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable, options);\n  }\n\n  getRawValue() {\n    return this.value;\n  }\n\n  markAsTouched(...opts) {\n    super.markAsTouched(...opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(...opts) {\n    super.markAsUntouched(...opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(...opts) {\n    super.markAsPristine(...opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(...opts) {\n    super.markAsDirty(...opts);\n    this.dirtyChanges.next(true);\n  }\n\n  setEnable(enable = true, opts) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts) {\n    disableControl(this, disable, opts);\n  }\n\n  disabledWhile(observable, options) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable, options) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  reset(formState, options) {\n    super.reset(formState, options);\n  }\n\n  setValidators(newValidators, options) {\n    super.setValidators(newValidators);\n    super.updateValueAndValidity(options);\n  }\n\n  setAsyncValidators(newValidator, options) {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity(options);\n  }\n\n  getError(...params) {\n    return super.getError(...params);\n  }\n\n  setErrors(...opts) {\n    var _a;\n    /**\n     * @description\n     * Use an elvis operator to avoid a throw when the control is used with an async validator\n     * Which will be instantly resolved (like with `of(null)`)\n     * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n     * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n     *\n     * Issue: https://github.com/ngneat/reactive-forms/issues/91\n     * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n     */\n\n\n    (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n    return super.setErrors(...opts);\n  }\n\n  mergeErrors(errors, opts) {\n    this.setErrors(mergeErrors(this.errors, errors), opts);\n  }\n\n  removeError(key, opts) {\n    this.setErrors(removeError(this.errors, key), opts);\n  }\n\n  hasErrorAndTouched(error) {\n    return hasErrorAnd('touched', this, error);\n  }\n\n  hasErrorAndDirty(error) {\n    return hasErrorAnd('dirty', this, error);\n  }\n\n}\n\nclass FormArray extends FormArray$1 {\n  constructor(controls, validatorOrOpts, asyncValidator) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.controls = controls;\n    this.touchChanges = new Subject();\n    this.dirtyChanges = new Subject();\n    this.errorsSubject = new Subject();\n    this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());\n    this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());\n    this.value$ = controlValueChanges$(this);\n    this.disabled$ = controlStatus$(this, 'disabled');\n    this.enabled$ = controlStatus$(this, 'enabled');\n    this.status$ = controlStatus$(this, 'status');\n    this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n  }\n\n  select(mapFn) {\n    return this.value$.pipe(map(mapFn), distinctUntilChanged());\n  }\n\n  setValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.setValue(value, options));\n    }\n\n    super.setValue(valueOrObservable, options);\n  }\n\n  patchValue(valueOrObservable, options) {\n    if (isObservable(valueOrObservable)) {\n      return valueOrObservable.subscribe(value => super.patchValue(value, options));\n    }\n\n    super.patchValue(valueOrObservable, options);\n  }\n\n  getRawValue() {\n    return super.getRawValue();\n  }\n\n  push(control) {\n    return super.push(control);\n  }\n\n  insert(index, control) {\n    return super.insert(index, control);\n  }\n\n  setControl(index, control) {\n    return super.setControl(index, control);\n  }\n\n  at(index) {\n    return super.at(index);\n  }\n\n  remove(value) {\n    this.removeWhen(v => v.value === value);\n  }\n\n  removeWhen(predicate) {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if (predicate(this.at(i))) {\n        this.removeAt(i);\n      }\n    }\n  }\n\n  markAsTouched(...opts) {\n    super.markAsTouched(...opts);\n    this.touchChanges.next(true);\n  }\n\n  markAsUntouched(...opts) {\n    super.markAsUntouched(...opts);\n    this.touchChanges.next(false);\n  }\n\n  markAsPristine(...opts) {\n    super.markAsPristine(...opts);\n    this.dirtyChanges.next(false);\n  }\n\n  markAsDirty(...opts) {\n    super.markAsDirty(...opts);\n    this.dirtyChanges.next(true);\n  }\n\n  markAllAsDirty() {\n    markAllDirty(this);\n  }\n\n  setEnable(enable = true, opts) {\n    enableControl(this, enable, opts);\n  }\n\n  setDisable(disable = true, opts) {\n    disableControl(this, disable, opts);\n  }\n\n  disabledWhile(observable, options) {\n    return controlDisabledWhile(this, observable, options);\n  }\n\n  enabledWhile(observable, options) {\n    return controlEnabledWhile(this, observable, options);\n  }\n\n  reset(formState, options) {\n    super.reset(formState, options);\n  }\n\n  setValidators(newValidators, options) {\n    super.setValidators(newValidators);\n    super.updateValueAndValidity(options);\n  }\n\n  setAsyncValidators(newValidator, options) {\n    super.setAsyncValidators(newValidator);\n    super.updateValueAndValidity(options);\n  }\n\n  getError(...params) {\n    return super.getError(...params);\n  }\n\n  setErrors(...opts) {\n    var _a;\n    /**\n     * @description\n     * Use an elvis operator to avoid a throw when the control is used with an async validator\n     * Which will be instantly resolved (like with `of(null)`)\n     * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n     * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n     *\n     * Issue: https://github.com/ngneat/reactive-forms/issues/91\n     * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n     */\n\n\n    (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n    return super.setErrors(...opts);\n  }\n\n  mergeErrors(errors, opts) {\n    this.setErrors(mergeErrors(this.errors, errors), opts);\n  }\n\n  removeError(key, opts) {\n    this.setErrors(removeError(this.errors, key), opts);\n  }\n\n  hasErrorAndTouched(error, path) {\n    return hasErrorAnd('touched', this, error, path);\n  }\n\n  hasErrorAndDirty(error, path) {\n    return hasErrorAnd('dirty', this, error, path);\n  }\n\n}\n\nclass FormBuilder extends FormBuilder$1 {\n  control(formState, validatorOrOpts, asyncValidator) {\n    return new FormControl(formState, validatorOrOpts, asyncValidator);\n  }\n\n  array(controlsConfig, validatorOrOpts, asyncValidator) {\n    const controls = controlsConfig.map(c => this._createControl(c));\n    return new FormArray(controls, validatorOrOpts, asyncValidator);\n  }\n\n  group(controlsConfig, options) {\n    const controls = this._reduceControls(controlsConfig);\n\n    let validators = null;\n    let asyncValidators = null;\n    let updateOn;\n\n    if (options != null) {\n      validators = options.validators != null ? options.validators : null;\n      asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n      updateOn = options.updateOn != null ? options.updateOn : undefined;\n    }\n\n    return new FormGroup(controls, {\n      asyncValidators,\n      updateOn,\n      validators\n    });\n  }\n\n}\n\nFormBuilder.ɵfac = /* @__PURE__ */function () {\n  let ɵFormBuilder_BaseFactory;\n  return function FormBuilder_Factory(t) {\n    return (ɵFormBuilder_BaseFactory || (ɵFormBuilder_BaseFactory = i0.ɵɵgetInheritedFactory(FormBuilder)))(t || FormBuilder);\n  };\n}();\n\nFormBuilder.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FormBuilder,\n  factory: FormBuilder.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FormBuilder, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nconst toArray = object => Object.keys(object);\n\nconst isArray = value => value && Array.isArray(value);\n\nconst isObject = value => typeof value === 'object' && value !== null;\n\nconst isFormArray = (prev, curr) => isArray(curr) || isArray(prev);\n\nconst isFormGroup = (prev, curr) => isObject(curr) || isObject(prev);\n\nconst isFormControl = (prev, curr) => !isFormArray(prev, curr) && !isFormGroup(prev, curr);\n\nconst convertTypesToArray = (left, right) => [left, right];\n/**\n * An operator which is used to filter valueChanges$ output, that it would emit only changed parts.\n *\n * @return {MonoTypeOperatorFunction} An Observable that emits items from the source Observable with only changed values.\n */\n\n\nfunction diff() {\n  return source$ => source$.pipe(startWith(undefined), pairwise(), map(control => reduceControlValue(...control)), filter(control => control !== undefined));\n}\n\nfunction reduceControlValue(prev, curr) {\n  if (prev === undefined) {\n    return curr;\n  }\n\n  if (isFormControl(prev, curr)) {\n    return prev === curr ? undefined : curr;\n  }\n\n  if (isFormArray(prev, curr)) {\n    const [left, right] = convertTypesToArray(prev, curr);\n    return compareArraysContent(left, right) ? undefined : curr;\n  }\n\n  return compareFormGroup(prev, curr);\n}\n\nfunction compareFormGroup(prev, curr) {\n  const reduced = reduceFormGroup(prev, curr);\n  return toArray(reduced).length === 0 ? undefined : reduced;\n}\n\nfunction reduceFormGroup(prev, curr) {\n  if (!prev) {\n    return curr;\n  }\n\n  return toArray(curr).reduce((acc, key) => {\n    const control = reduceControlValue(prev[key], curr[key]);\n\n    if (control !== undefined) {\n      acc[key] = control;\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction compareArraysContent(left, right) {\n  left = Array.isArray(left) ? left : [];\n  right = Array.isArray(right) ? right : [];\n  return left.length === right.length && left.every(value => right.includes(value));\n}\n\nfunction persistControl(control, key, {\n  debounceTime,\n  manager,\n  arrControlFactory,\n  persistDisabledControls\n}) {\n  const persistManager = manager || new LocalStorageManager();\n  return restoreControl(control, key, persistManager, arrControlFactory).pipe(switchMap(() => persistValue$(control, key, {\n    debounceTime: debounceTime || 250,\n    manager: persistManager,\n    persistDisabledControls\n  })));\n}\n\nfunction persistValue$(control, key, options) {\n  return control.valueChanges.pipe( // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  debounceTime(options.debounceTime), switchMap(value => // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  wrapIntoObservable(options.manager.setValue(key, options.persistDisabledControls ? control.getRawValue() : value))));\n}\n\nfunction restoreControl(control, key, manager, arrControlFactory) {\n  return wrapIntoObservable(manager.getValue(key)).pipe(take(1), tap(value => {\n    if (!value) return;\n\n    if (arrControlFactory) {\n      handleFormArrays(control, value, arrControlFactory);\n    }\n\n    control.patchValue(value, {\n      emitEvent: false\n    });\n  }));\n}\n\nfunction handleFormArrays(control, formValue, arrControlFactory) {\n  Object.keys(formValue).forEach(controlName => {\n    const value = formValue[controlName];\n\n    if (Array.isArray(value) && control.get(controlName) instanceof FormArray$1) {\n      if (!arrControlFactory || arrControlFactory && !(controlName in arrControlFactory)) {\n        throw new Error(`Please provide arrControlFactory for ${controlName}`);\n      }\n\n      const current = control.get(controlName);\n      const fc = arrControlFactory[controlName];\n      clearFormArray(current);\n      value.forEach((v, i) => current.insert(i, fc(v)));\n    }\n  });\n}\n\nfunction clearFormArray(control) {\n  while (control.length !== 0) {\n    control.removeAt(0);\n  }\n}\n\nfunction wrapIntoObservable(value) {\n  if (isObservable(value) || isPromise(value)) {\n    return from(value);\n  }\n\n  return of(value);\n}\n\nfunction isPromise(value) {\n  return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';\n}\n\nclass LocalStorageManager {\n  setValue(key, data) {\n    localStorage.setItem(key, JSON.stringify(data));\n    return data;\n  }\n\n  getValue(key) {\n    return JSON.parse(localStorage.getItem(key) || '{}');\n  }\n\n}\n\nclass SessionStorageManager {\n  setValue(key, data) {\n    sessionStorage.setItem(key, JSON.stringify(data));\n    return data;\n  }\n\n  getValue(key) {\n    return JSON.parse(sessionStorage.getItem(key) || '{}');\n  }\n\n}\n\nclass ControlValueAccessor {\n  constructor() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    this.onChange = value => {//\n    }; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n\n    this.onTouched = () => {};\n  }\n\n  registerOnChange(fn) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ControlValueAccessor, FormArray, FormBuilder, FormControl, FormGroup, LocalStorageManager, SessionStorageManager, diff, persistControl, restoreControl };","map":{"version":3,"sources":["/home/christodoulos/Workspace/gnosys/node_modules/@ngneat/reactive-forms/fesm2015/ngneat-reactive-forms.mjs"],"names":["FormGroup","FormGroup$1","FormControl","FormControl$1","FormArray","FormArray$1","FormBuilder","FormBuilder$1","merge","defer","of","Subject","isObservable","from","map","distinctUntilChanged","startWith","pairwise","filter","take","tap","switchMap","debounceTime","i0","Injectable","selectControlValue$","control","mapFn","value$","pipe","controlValueChanges$","getRawValue","valueChanges","controlStatus$","type","statusChanges","enableControl","enabled","opts","enable","disable","disableControl","disabled","controlDisabledWhile","observable","subscribe","isDisabled","controlEnabledWhile","isEnabled","mergeErrors","existing","toAdd","Object","assign","removeError","errors","key","updatedErrors","keys","length","hasErrorAnd","and","error","path","hasError","undefined","controlErrorChanges$","errors$","a","b","JSON","stringify","markAllDirty","markAsDirty","onlySelf","_forEachChild","_a","markAllAsDirty","call","constructor","controls","validatorOrOpts","asyncValidator","touchChanges","dirtyChanges","errorsSubject","touch$","asObservable","dirty$","disabled$","enabled$","status$","select","get","setValue","valueOrObservable","options","value","patchValue","markAsTouched","next","markAsUntouched","markAsPristine","setEnable","setDisable","disabledWhile","enabledWhile","reset","formState","setValidators","newValidators","updateValueAndValidity","setAsyncValidators","newValidator","getError","params","setErrors","hasErrorAndTouched","hasErrorAndDirty","push","insert","index","setControl","at","remove","removeWhen","v","predicate","i","removeAt","array","controlsConfig","c","_createControl","group","_reduceControls","validators","asyncValidators","updateOn","ɵfac","ɵprov","args","providedIn","toArray","object","isArray","Array","isObject","isFormArray","prev","curr","isFormGroup","isFormControl","convertTypesToArray","left","right","diff","source$","reduceControlValue","compareArraysContent","compareFormGroup","reduced","reduceFormGroup","reduce","acc","every","includes","persistControl","manager","arrControlFactory","persistDisabledControls","persistManager","LocalStorageManager","restoreControl","persistValue$","wrapIntoObservable","getValue","handleFormArrays","emitEvent","formValue","forEach","controlName","Error","current","fc","clearFormArray","isPromise","then","data","localStorage","setItem","parse","getItem","SessionStorageManager","sessionStorage","ControlValueAccessor","onChange","onTouched","registerOnChange","fn","registerOnTouched"],"mappings":"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","sourcesContent":["import { FormGroup as FormGroup$1, FormControl as FormControl$1, FormArray as FormArray$1, FormBuilder as FormBuilder$1 } from '@angular/forms';\nimport { merge, defer, of, Subject, isObservable, from } from 'rxjs';\nimport { map, distinctUntilChanged, startWith, pairwise, filter, take, tap, switchMap, debounceTime } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\nfunction selectControlValue$(control, mapFn) {\n    return control.value$.pipe(map(mapFn), distinctUntilChanged());\n}\nfunction controlValueChanges$(control) {\n    return merge(defer(() => of(control.getRawValue())), control.valueChanges.pipe(map(() => control.getRawValue())));\n}\nfunction controlStatus$(control, type) {\n    return merge(defer(() => of(control[type])), control.statusChanges.pipe(map(() => control[type]), distinctUntilChanged()));\n}\nfunction enableControl(control, enabled, opts) {\n    if (enabled) {\n        control.enable(opts);\n    }\n    else {\n        control.disable(opts);\n    }\n}\nfunction disableControl(control, disabled, opts) {\n    enableControl(control, !disabled, opts);\n}\nfunction controlDisabledWhile(control, observable, opts) {\n    return observable.subscribe((isDisabled) => disableControl(control, isDisabled, opts));\n}\nfunction controlEnabledWhile(control, observable, opts) {\n    return observable.subscribe((isEnabled) => enableControl(control, isEnabled, opts));\n}\nfunction mergeErrors(existing, toAdd) {\n    if (!existing && !toAdd) {\n        return null;\n    }\n    return Object.assign(Object.assign({}, existing), toAdd);\n}\nfunction removeError(errors, key) {\n    if (!errors) {\n        return null;\n    }\n    const updatedErrors = Object.assign({}, errors);\n    delete updatedErrors[key];\n    return Object.keys(updatedErrors).length > 0 ? updatedErrors : null;\n}\nfunction hasErrorAnd(and, control, error, path) {\n    const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);\n    return hasError && control[and];\n}\nfunction controlErrorChanges$(control, errors$) {\n    return merge(defer(() => of(control.errors)), errors$, control.valueChanges.pipe(map(() => control.errors), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b))));\n}\nfunction markAllDirty(control) {\n    control.markAsDirty({ onlySelf: true });\n    control._forEachChild((control) => { var _a; return (_a = control.markAllAsDirty) === null || _a === void 0 ? void 0 : _a.call(control); });\n}\n\nclass FormGroup extends FormGroup$1 {\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(controls, validatorOrOpts, asyncValidator);\n        this.controls = controls;\n        this.touchChanges = new Subject();\n        this.dirtyChanges = new Subject();\n        this.errorsSubject = new Subject();\n        this.touch$ = this.touchChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.dirty$ = this.dirtyChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.value$ = controlValueChanges$(this);\n        this.disabled$ = controlStatus$(this, 'disabled');\n        this.enabled$ = controlStatus$(this, 'enabled');\n        this.status$ = controlStatus$(this, 'status');\n        this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n    }\n    select(mapFn) {\n        return selectControlValue$(this, mapFn);\n    }\n    get(key) {\n        return super.get(key);\n    }\n    setValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.setValue(value, options));\n        }\n        super.setValue(valueOrObservable, options);\n    }\n    patchValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.patchValue(value, options));\n        }\n        super.patchValue(valueOrObservable, options);\n    }\n    getRawValue() {\n        return super.getRawValue();\n    }\n    markAsTouched(...opts) {\n        super.markAsTouched(...opts);\n        this.touchChanges.next(true);\n    }\n    markAsUntouched(...opts) {\n        super.markAsUntouched(...opts);\n        this.touchChanges.next(false);\n    }\n    markAsPristine(...opts) {\n        super.markAsPristine(...opts);\n        this.dirtyChanges.next(false);\n    }\n    markAsDirty(...opts) {\n        super.markAsDirty(...opts);\n        this.dirtyChanges.next(true);\n    }\n    markAllAsDirty() {\n        markAllDirty(this);\n    }\n    setEnable(enable = true, opts) {\n        enableControl(this, enable, opts);\n    }\n    setDisable(disable = true, opts) {\n        disableControl(this, disable, opts);\n    }\n    disabledWhile(observable, options) {\n        return controlDisabledWhile(this, observable, options);\n    }\n    enabledWhile(observable, options) {\n        return controlEnabledWhile(this, observable, options);\n    }\n    reset(formState, options) {\n        super.reset(formState, options);\n    }\n    setValidators(newValidators, options) {\n        super.setValidators(newValidators);\n        super.updateValueAndValidity(options);\n    }\n    setAsyncValidators(newValidator, options) {\n        super.setAsyncValidators(newValidator);\n        super.updateValueAndValidity(options);\n    }\n    getError(...params) {\n        return super.getError(...params);\n    }\n    setErrors(...opts) {\n        var _a;\n        /**\n         * @description\n         * Use an elvis operator to avoid a throw when the control is used with an async validator\n         * Which will be instantly resolved (like with `of(null)`)\n         * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n         * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n         *\n         * Issue: https://github.com/ngneat/reactive-forms/issues/91\n         * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n         */\n        (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n        return super.setErrors(...opts);\n    }\n    mergeErrors(errors, opts) {\n        this.setErrors(mergeErrors(this.errors, errors), opts);\n    }\n    removeError(key, opts) {\n        this.setErrors(removeError(this.errors, key), opts);\n    }\n    hasErrorAndTouched(error, path) {\n        return hasErrorAnd('touched', this, error, path);\n    }\n    hasErrorAndDirty(error, path) {\n        return hasErrorAnd('dirty', this, error, path);\n    }\n}\n\nclass FormControl extends FormControl$1 {\n    constructor(formState, validatorOrOpts, asyncValidator) {\n        super(formState, validatorOrOpts, asyncValidator);\n        this.touchChanges = new Subject();\n        this.dirtyChanges = new Subject();\n        this.errorsSubject = new Subject();\n        this.touch$ = this.touchChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.dirty$ = this.dirtyChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.value$ = controlValueChanges$(this);\n        this.disabled$ = controlStatus$(this, 'disabled');\n        this.enabled$ = controlStatus$(this, 'enabled');\n        this.status$ = controlStatus$(this, 'status');\n        this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n    }\n    setValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.setValue(value, options));\n        }\n        super.setValue(valueOrObservable, options);\n    }\n    patchValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.patchValue(value, options));\n        }\n        super.patchValue(valueOrObservable, options);\n    }\n    getRawValue() {\n        return this.value;\n    }\n    markAsTouched(...opts) {\n        super.markAsTouched(...opts);\n        this.touchChanges.next(true);\n    }\n    markAsUntouched(...opts) {\n        super.markAsUntouched(...opts);\n        this.touchChanges.next(false);\n    }\n    markAsPristine(...opts) {\n        super.markAsPristine(...opts);\n        this.dirtyChanges.next(false);\n    }\n    markAsDirty(...opts) {\n        super.markAsDirty(...opts);\n        this.dirtyChanges.next(true);\n    }\n    setEnable(enable = true, opts) {\n        enableControl(this, enable, opts);\n    }\n    setDisable(disable = true, opts) {\n        disableControl(this, disable, opts);\n    }\n    disabledWhile(observable, options) {\n        return controlDisabledWhile(this, observable, options);\n    }\n    enabledWhile(observable, options) {\n        return controlEnabledWhile(this, observable, options);\n    }\n    reset(formState, options) {\n        super.reset(formState, options);\n    }\n    setValidators(newValidators, options) {\n        super.setValidators(newValidators);\n        super.updateValueAndValidity(options);\n    }\n    setAsyncValidators(newValidator, options) {\n        super.setAsyncValidators(newValidator);\n        super.updateValueAndValidity(options);\n    }\n    getError(...params) {\n        return super.getError(...params);\n    }\n    setErrors(...opts) {\n        var _a;\n        /**\n         * @description\n         * Use an elvis operator to avoid a throw when the control is used with an async validator\n         * Which will be instantly resolved (like with `of(null)`)\n         * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n         * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n         *\n         * Issue: https://github.com/ngneat/reactive-forms/issues/91\n         * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n         */\n        (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n        return super.setErrors(...opts);\n    }\n    mergeErrors(errors, opts) {\n        this.setErrors(mergeErrors(this.errors, errors), opts);\n    }\n    removeError(key, opts) {\n        this.setErrors(removeError(this.errors, key), opts);\n    }\n    hasErrorAndTouched(error) {\n        return hasErrorAnd('touched', this, error);\n    }\n    hasErrorAndDirty(error) {\n        return hasErrorAnd('dirty', this, error);\n    }\n}\n\nclass FormArray extends FormArray$1 {\n    constructor(controls, validatorOrOpts, asyncValidator) {\n        super(controls, validatorOrOpts, asyncValidator);\n        this.controls = controls;\n        this.touchChanges = new Subject();\n        this.dirtyChanges = new Subject();\n        this.errorsSubject = new Subject();\n        this.touch$ = this.touchChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.dirty$ = this.dirtyChanges\n            .asObservable()\n            .pipe(distinctUntilChanged());\n        this.value$ = controlValueChanges$(this);\n        this.disabled$ = controlStatus$(this, 'disabled');\n        this.enabled$ = controlStatus$(this, 'enabled');\n        this.status$ = controlStatus$(this, 'status');\n        this.errors$ = controlErrorChanges$(this, this.errorsSubject.asObservable());\n    }\n    select(mapFn) {\n        return this.value$.pipe(map(mapFn), distinctUntilChanged());\n    }\n    setValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.setValue(value, options));\n        }\n        super.setValue(valueOrObservable, options);\n    }\n    patchValue(valueOrObservable, options) {\n        if (isObservable(valueOrObservable)) {\n            return valueOrObservable.subscribe((value) => super.patchValue(value, options));\n        }\n        super.patchValue(valueOrObservable, options);\n    }\n    getRawValue() {\n        return super.getRawValue();\n    }\n    push(control) {\n        return super.push(control);\n    }\n    insert(index, control) {\n        return super.insert(index, control);\n    }\n    setControl(index, control) {\n        return super.setControl(index, control);\n    }\n    at(index) {\n        return super.at(index);\n    }\n    remove(value) {\n        this.removeWhen((v) => v.value === value);\n    }\n    removeWhen(predicate) {\n        for (let i = this.length - 1; i >= 0; --i) {\n            if (predicate(this.at(i))) {\n                this.removeAt(i);\n            }\n        }\n    }\n    markAsTouched(...opts) {\n        super.markAsTouched(...opts);\n        this.touchChanges.next(true);\n    }\n    markAsUntouched(...opts) {\n        super.markAsUntouched(...opts);\n        this.touchChanges.next(false);\n    }\n    markAsPristine(...opts) {\n        super.markAsPristine(...opts);\n        this.dirtyChanges.next(false);\n    }\n    markAsDirty(...opts) {\n        super.markAsDirty(...opts);\n        this.dirtyChanges.next(true);\n    }\n    markAllAsDirty() {\n        markAllDirty(this);\n    }\n    setEnable(enable = true, opts) {\n        enableControl(this, enable, opts);\n    }\n    setDisable(disable = true, opts) {\n        disableControl(this, disable, opts);\n    }\n    disabledWhile(observable, options) {\n        return controlDisabledWhile(this, observable, options);\n    }\n    enabledWhile(observable, options) {\n        return controlEnabledWhile(this, observable, options);\n    }\n    reset(formState, options) {\n        super.reset(formState, options);\n    }\n    setValidators(newValidators, options) {\n        super.setValidators(newValidators);\n        super.updateValueAndValidity(options);\n    }\n    setAsyncValidators(newValidator, options) {\n        super.setAsyncValidators(newValidator);\n        super.updateValueAndValidity(options);\n    }\n    getError(...params) {\n        return super.getError(...params);\n    }\n    setErrors(...opts) {\n        var _a;\n        /**\n         * @description\n         * Use an elvis operator to avoid a throw when the control is used with an async validator\n         * Which will be instantly resolved (like with `of(null)`)\n         * In such case, Angular will call this method instantly before even instancing the properties causing the throw\n         * Can be easily reproduced with a step-by-step debug once compiled when checking the stack trace of the constructor\n         *\n         * Issue: https://github.com/ngneat/reactive-forms/issues/91\n         * Reproduction: https://codesandbox.io/embed/github/C0ZEN/ngneat-reactive-forms-error-issue-cs/tree/main/?autoresize=1&expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark\n         */\n        (_a = this.errorsSubject) === null || _a === void 0 ? void 0 : _a.next(opts[0]);\n        return super.setErrors(...opts);\n    }\n    mergeErrors(errors, opts) {\n        this.setErrors(mergeErrors(this.errors, errors), opts);\n    }\n    removeError(key, opts) {\n        this.setErrors(removeError(this.errors, key), opts);\n    }\n    hasErrorAndTouched(error, path) {\n        return hasErrorAnd('touched', this, error, path);\n    }\n    hasErrorAndDirty(error, path) {\n        return hasErrorAnd('dirty', this, error, path);\n    }\n}\n\nclass FormBuilder extends FormBuilder$1 {\n    control(formState, validatorOrOpts, asyncValidator) {\n        return new FormControl(formState, validatorOrOpts, asyncValidator);\n    }\n    array(controlsConfig, validatorOrOpts, asyncValidator) {\n        const controls = controlsConfig.map(c => this._createControl(c));\n        return new FormArray(controls, validatorOrOpts, asyncValidator);\n    }\n    group(controlsConfig, options) {\n        const controls = this._reduceControls(controlsConfig);\n        let validators = null;\n        let asyncValidators = null;\n        let updateOn;\n        if (options != null) {\n            validators = options.validators != null ? options.validators : null;\n            asyncValidators = options.asyncValidators != null ? options.asyncValidators : null;\n            updateOn = options.updateOn != null ? options.updateOn : undefined;\n        }\n        return new FormGroup(controls, { asyncValidators, updateOn, validators });\n    }\n}\nFormBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: FormBuilder, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nFormBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: FormBuilder, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.2\", ngImport: i0, type: FormBuilder, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nconst toArray = (object) => Object.keys(object);\nconst isArray = (value) => value && Array.isArray(value);\nconst isObject = (value) => typeof value === 'object' && value !== null;\nconst isFormArray = (prev, curr) => isArray(curr) || isArray(prev);\nconst isFormGroup = (prev, curr) => isObject(curr) || isObject(prev);\nconst isFormControl = (prev, curr) => !isFormArray(prev, curr) && !isFormGroup(prev, curr);\nconst convertTypesToArray = (left, right) => [left, right];\n/**\n * An operator which is used to filter valueChanges$ output, that it would emit only changed parts.\n *\n * @return {MonoTypeOperatorFunction} An Observable that emits items from the source Observable with only changed values.\n */\nfunction diff() {\n    return (source$) => source$.pipe(startWith(undefined), pairwise(), map(control => reduceControlValue(...control)), filter(control => control !== undefined));\n}\nfunction reduceControlValue(prev, curr) {\n    if (prev === undefined) {\n        return curr;\n    }\n    if (isFormControl(prev, curr)) {\n        return prev === curr ? undefined : curr;\n    }\n    if (isFormArray(prev, curr)) {\n        const [left, right] = convertTypesToArray(prev, curr);\n        return compareArraysContent(left, right) ? undefined : curr;\n    }\n    return compareFormGroup(prev, curr);\n}\nfunction compareFormGroup(prev, curr) {\n    const reduced = reduceFormGroup(prev, curr);\n    return toArray(reduced).length === 0 ? undefined : reduced;\n}\nfunction reduceFormGroup(prev, curr) {\n    if (!prev) {\n        return curr;\n    }\n    return toArray(curr).reduce((acc, key) => {\n        const control = reduceControlValue(prev[key], curr[key]);\n        if (control !== undefined) {\n            acc[key] = control;\n        }\n        return acc;\n    }, {});\n}\nfunction compareArraysContent(left, right) {\n    left = Array.isArray(left) ? left : [];\n    right = Array.isArray(right) ? right : [];\n    return left.length === right.length && left.every(value => right.includes(value));\n}\n\nfunction persistControl(control, key, { debounceTime, manager, arrControlFactory, persistDisabledControls }) {\n    const persistManager = manager || new LocalStorageManager();\n    return restoreControl(control, key, persistManager, arrControlFactory).pipe(switchMap(() => persistValue$(control, key, {\n        debounceTime: debounceTime || 250,\n        manager: persistManager,\n        persistDisabledControls\n    })));\n}\nfunction persistValue$(control, key, options) {\n    return control.valueChanges.pipe(\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    debounceTime(options.debounceTime), switchMap(value => \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    wrapIntoObservable(options.manager.setValue(key, options.persistDisabledControls ? control.getRawValue() : value))));\n}\nfunction restoreControl(control, key, manager, arrControlFactory) {\n    return wrapIntoObservable(manager.getValue(key)).pipe(take(1), tap(value => {\n        if (!value)\n            return;\n        if (arrControlFactory) {\n            handleFormArrays(control, value, arrControlFactory);\n        }\n        control.patchValue(value, { emitEvent: false });\n    }));\n}\nfunction handleFormArrays(control, formValue, arrControlFactory) {\n    Object.keys(formValue).forEach(controlName => {\n        const value = formValue[controlName];\n        if (Array.isArray(value) && control.get(controlName) instanceof FormArray$1) {\n            if (!arrControlFactory || (arrControlFactory && !(controlName in arrControlFactory))) {\n                throw new Error(`Please provide arrControlFactory for ${controlName}`);\n            }\n            const current = control.get(controlName);\n            const fc = arrControlFactory[controlName];\n            clearFormArray(current);\n            value.forEach((v, i) => current.insert(i, fc(v)));\n        }\n    });\n}\nfunction clearFormArray(control) {\n    while (control.length !== 0) {\n        control.removeAt(0);\n    }\n}\nfunction wrapIntoObservable(value) {\n    if (isObservable(value) || isPromise(value)) {\n        return from(value);\n    }\n    return of(value);\n}\nfunction isPromise(value) {\n    return typeof (value === null || value === void 0 ? void 0 : value.then) === 'function';\n}\nclass LocalStorageManager {\n    setValue(key, data) {\n        localStorage.setItem(key, JSON.stringify(data));\n        return data;\n    }\n    getValue(key) {\n        return JSON.parse(localStorage.getItem(key) || '{}');\n    }\n}\nclass SessionStorageManager {\n    setValue(key, data) {\n        sessionStorage.setItem(key, JSON.stringify(data));\n        return data;\n    }\n    getValue(key) {\n        return JSON.parse(sessionStorage.getItem(key) || '{}');\n    }\n}\n\nclass ControlValueAccessor {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        this.onChange = (value) => {\n            //\n        };\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        this.onTouched = () => { };\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ControlValueAccessor, FormArray, FormBuilder, FormControl, FormGroup, LocalStorageManager, SessionStorageManager, diff, persistControl, restoreControl };\n"]},"metadata":{},"sourceType":"module"}